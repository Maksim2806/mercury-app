{"version":3,"sources":["components/WeatherCardPlaceholder/assets/Academy-Weather-bg160.svg","components/WeatherCardPlaceholder/index.tsx","components/WeatherCard/index.tsx","components/Select/assets/chevron-top.svg","components/Select/assets/chevron-bottom.svg","components/Select/index.tsx","constants/cities.ts","service/index.ts","constants/api.ts","service/fetchWeatherForecast.ts","components/Carousel/CarouselItem/index.tsx","components/Carousel/index.tsx","components/WeatherCardItem/index.tsx","utils/index.ts","ForecastPage/WeatherCards/DailyForecastCard/index.tsx","components/InputDate/index.tsx","ForecastPage/WeatherCards/HistoricalForecastCard/index.tsx","ForecastPage/WeatherCards/index.tsx","ForecastPage/index.tsx","App.tsx","index.tsx"],"names":["WeatherCardPlaceholder","className","src","cloudsImg","alt","WeatherCard","title","content","inputComponents","map","inputComponent","Select","options","value","onChange","defaultValue","placeholder","useState","isOptionsMenuOpen","setIsOptionsMenuOpen","selectValue","useMemo","isSelectElem","search","toggleOptionsMenu","useCallback","e","elemClassName","target","isOpen","handleSelect","option","stopPropagation","onClickOutside","composedPath","some","el","useEffect","document","addEventListener","removeEventListener","arrowImage","ChevronTop","ChevronBottom","cn","select","select_active","select_filled","onClick","name","key","CitiesOptions","lat","lon","ServerError","code","message","Error","InternalServerError","request","url","queryParams","a","queryString","stringify","appid","process","fetch","result","status","json","cod","api","get","fetchHistoricalForecast","params","fetchDailyForecast","extendedParams","exclude","CarouselItem","item","isLastItem","classnames","carouselItem","carouselItem_noMargin","Carousel","carouselRef","useRef","handleLeftClick","scrollLeft","current","scrollTo","left","undefined","behavior","handleRightClick","ref","idx","length","WeatherCardItem","date","iconName","temperature","getDate","formatUnixTimeToDate","unixTime","Date","makeDateDoubleSymbol","number","numberAsString","formatDateToString","year","getFullYear","month","getMonth","day","DailyForecastCard","data","setData","setError","selectCityValue","setSelectCityValue","onSelectCity","selectedOption","console","log","carouselContent","daily","dt","weather","temp","icon","DateInput","handleChange","type","HistoricalForecastCard","selectedDateValue","setSelectedDateValue","fetchData","selectedCity","selectedDate","Math","round","getTime","onSelectDate","WeatherCards","ForecastPage","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ae694591.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Academy-Weather-bg160.1a743710.svg\";","import React from 'react'\r\nimport './styles.css'\r\nimport cloudsImg from './assets/Academy-Weather-bg160.svg'\r\n\r\nconst WeatherCardPlaceholder = () => {\r\n  return (\r\n    <figure className=\"weather-card-placeholder\">\r\n      <img\r\n        className=\"weather-card-placeholder__img\"\r\n        src={cloudsImg}\r\n        alt=\"placeholder\"\r\n      />\r\n      <figcaption className=\"weather-card-placeholder__figcaption\">\r\n        Fill in all the fields and the weather will be displayed\r\n      </figcaption>\r\n    </figure>\r\n  )\r\n}\r\n\r\nexport { WeatherCardPlaceholder }\r\n","import React from 'react'\r\nimport './styles.css'\r\nimport { WeatherCardPlaceholder } from 'components/WeatherCardPlaceholder'\r\n\r\ninterface Props {\r\n  title: string;\r\n  content?: React.ReactNode;\r\n  inputComponents: React.ReactNode[];\r\n}\r\n\r\nconst WeatherCard: React.FC<Props> = ({ title, content, inputComponents }) => {\r\n  return (\r\n    <div className=\"weather-card\">\r\n      <h2 className=\"weather-card__title\">{title}</h2>\r\n      <div className=\"weather-card__inputs\">\r\n        {inputComponents.map((inputComponent) => inputComponent)}\r\n      </div>\r\n      <div className=\"weater-card__content\">\r\n        {content || <WeatherCardPlaceholder />}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { WeatherCard }\r\n","export default __webpack_public_path__ + \"static/media/chevron-top.01db9ee1.svg\";","export default __webpack_public_path__ + \"static/media/chevron-bottom.a5408ea9.svg\";","import React, { useCallback, useEffect, useMemo, useState } from 'react'\r\nimport cn from 'classnames'\r\n\r\nimport ChevronTop from './assets/chevron-top.svg'\r\nimport ChevronBottom from './assets/chevron-bottom.svg'\r\nimport './styles.css'\r\n\r\nexport interface IOption {\r\n  name: string\r\n  value: any\r\n  key: string | number\r\n}\r\n\r\ninterface Props {\r\n  options: Array<IOption>\r\n  onChange: (option: IOption) => void\r\n  value?: IOption\r\n  defaultValue?: IOption\r\n  placeholder?: string\r\n}\r\n\r\nconst Select: React.FC<Props> = ({ options, value, onChange, defaultValue, placeholder = 'Select city' }) => {\r\n  const [isOptionsMenuOpen, setIsOptionsMenuOpen] = useState<boolean>(false)\r\n\r\n  const selectValue = useMemo(() => value || defaultValue, [value, defaultValue])\r\n\r\n  const isSelectElem = (className: string) => className.search(/\\bselect\\b/) !== -1\r\n  const isSelectOptionsElem = (className: string) => className.search(/\\bselect-options\\b/) !== -1\r\n  const isSelectArrowElem = (className: string) => className.search(/\\bselect__img-arrow\\b/) !== -1\r\n\r\n  const toggleOptionsMenu = useCallback((e: any) => {\r\n    const elemClassName = e.target.className || ''\r\n    if (isSelectElem || isSelectArrowElem(elemClassName)) {\r\n      setIsOptionsMenuOpen((isOpen) => !isOpen)\r\n    }\r\n  }, [])\r\n\r\n  const handleSelect = useCallback((option: IOption) => (e: React.SyntheticEvent<HTMLDivElement>) => {\r\n    e.stopPropagation()\r\n    setIsOptionsMenuOpen(false)\r\n    onChange(option)\r\n  }, [onChange])\r\n\r\n  const onClickOutside = useCallback((e:any) => {\r\n    const composedPath = e.composedPath()\r\n\r\n    const needToCloseMenu = !composedPath.some((el: any) => {\r\n      const elemClassName = el.className || ''\r\n      return isSelectElem(elemClassName) || isSelectOptionsElem(elemClassName)\r\n    })\r\n\r\n    if (needToCloseMenu) {\r\n      setIsOptionsMenuOpen(false)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('click', onClickOutside)\r\n    return () => {\r\n      document.removeEventListener('click', onClickOutside)\r\n    }\r\n  }, [onClickOutside])\r\n\r\n  const arrowImage = useMemo(() => {\r\n    return isOptionsMenuOpen ? ChevronTop : ChevronBottom\r\n  }, [isOptionsMenuOpen])\r\n\r\n  return (<div className={cn({\r\n    select: true,\r\n    select_active: isOptionsMenuOpen,\r\n    select_filled: !!selectValue\r\n  })} onClick={toggleOptionsMenu}>\r\n      {selectValue?.name || placeholder}\r\n      <img className=\"select__img-arrow\" src={arrowImage} alt=\"arrow\" />\r\n      {isOptionsMenuOpen && <div className=\"select__options\" >\r\n          {options.map((option) => {\r\n            return <div className=\"select__oneOption\" key={option.key} onClick={handleSelect(option)}>{option.name}</div>\r\n          })}\r\n      </div>}\r\n  </div>)\r\n}\r\n\r\nexport { Select }\r\n","export const CitiesOptions = [\r\n  {\r\n    name: 'Samara',\r\n    key: 'Samara',\r\n    value: {\r\n      lat: 53.195873,\r\n      lon: 50.100193\r\n    }\r\n  },\r\n  {\r\n    name: 'Tolyatti',\r\n    key: 'Tolyatti',\r\n    value: {\r\n      lat: 53.507836,\r\n      lon: 49.420393\r\n    }\r\n  },\r\n  {\r\n    name: 'Saratov',\r\n    key: 'Saratov',\r\n    value: {\r\n      lat: 51.533557,\r\n      lon: 46.034257\r\n    }\r\n  },\r\n  {\r\n    name: 'Kazan',\r\n    key: 'Kazan',\r\n    value: {\r\n      lat: 55.796127,\r\n      lon: 49.106405\r\n    }\r\n  },\r\n  {\r\n    name: 'Krasnodar',\r\n    key: 'Krasnodar',\r\n    value: {\r\n      lat: 45.03547,\r\n      lon: 38.975313\r\n    }\r\n  }\r\n]\r\n","import { API_KEY, API_BASE_URL } from 'constants/api'\r\nimport { stringify } from 'query-string'\r\n\r\nexport const INTERNAL_SERVER_ERROR_CODE = 500\r\nclass ServerError extends Error {\r\n  code: number\r\n  message: string\r\n  constructor (code: number, message: string) {\r\n    super()\r\n    this.code = code\r\n    this.message = message\r\n  }\r\n}\r\n\r\nclass InternalServerError extends ServerError {\r\n  constructor (message?: string) {\r\n    super(INTERNAL_SERVER_ERROR_CODE, message || 'Internal Server Error')\r\n  }\r\n}\r\n\r\nconst request = async <T>(\r\n  url: string,\r\n  queryParams?: Record<string, any>,\r\n  options?: RequestInit\r\n): Promise<T> => {\r\n  const queryString = stringify({ ...(queryParams || {}), appid: API_KEY })\r\n\r\n  try {\r\n    const result = await fetch(`${API_BASE_URL}${url}?${queryString}`, {\r\n      ...(options || {})\r\n    })\r\n    if (result.status >= 400) {\r\n      throw await result.json()\r\n    }\r\n\r\n    return result.json()\r\n  } catch (e) {\r\n    let error\r\n    if (e.code === INTERNAL_SERVER_ERROR_CODE) {\r\n      error = new InternalServerError()\r\n    } else {\r\n      error = new ServerError(e.cod, e.message)\r\n    }\r\n\r\n    throw error\r\n  }\r\n}\r\n\r\nconst api = {\r\n  get: async <T>(\r\n    url: string,\r\n    queryParams?: Record<string, any>,\r\n    options?: RequestInit\r\n  ): Promise<T> => {\r\n    return await request(url, queryParams, options)\r\n  }\r\n}\r\n\r\nexport default api\r\n","const API_BASE_URL = process.env.REACT_APP_API_BASE_URL\r\nconst API_KEY = process.env.REACT_APP_API_KEY\r\n\r\nexport { API_BASE_URL, API_KEY }\r\n","import api from '.'\r\nimport {\r\n  DailyForecastParams,\r\n  DailyForecastResponse,\r\n  HistoricalForecastParams,\r\n  HistoricalForecastResponse\r\n} from './types/fetchWeatherForecastTypes'\r\n\r\nexport const fetchHistoricalForecast = async (\r\n  params: HistoricalForecastParams\r\n) => await api.get<HistoricalForecastResponse>('/onecall/timemachine', params)\r\n\r\nexport const fetchDailyForecast = async (params: DailyForecastParams) => {\r\n  const extendedParams = {\r\n    ...params,\r\n    exclude: 'minutely,hourly,current,alerts'\r\n  }\r\n  return await api.get<DailyForecastResponse>('/onecall', extendedParams)\r\n}\r\n\r\nexport const getImage = (name: string) =>\r\n  `http://openweathermap.org/img/wn/${name}@2x.png`\r\n","import React from 'react'\r\nimport './styles.css'\r\nimport classnames from 'classnames'\r\n\r\ninterface Props {\r\n  item: React.ReactNode;\r\n  isLastItem?: boolean;\r\n}\r\n\r\nconst CarouselItem: React.FC<Props> = ({ item, isLastItem }) => {\r\n  return (\r\n    <div\r\n      className={classnames({\r\n        carouselItem: true,\r\n        carouselItem_noMargin: !!isLastItem\r\n      })}\r\n    >\r\n      {item}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { CarouselItem }\r\n","import React, { useRef, useCallback } from 'react'\r\nimport { CarouselItem } from './CarouselItem'\r\nimport './styles.css'\r\n\r\ninterface Props {\r\n  content: React.ReactNode[];\r\n}\r\n\r\nconst Carousel: React.FC<Props> = ({ content }) => {\r\n  const carouselRef = useRef<HTMLDivElement | null>(null)\r\n\r\n  const handleLeftClick = useCallback(() => {\r\n    const scrollLeft = carouselRef.current?.scrollLeft\r\n    carouselRef.current?.scrollTo({\r\n      left: scrollLeft !== undefined ? scrollLeft - 170 : 0,\r\n      behavior: 'smooth'\r\n    })\r\n  }, [carouselRef])\r\n\r\n  const handleRightClick = useCallback(() => {\r\n    const scrollLeft = carouselRef.current?.scrollLeft\r\n    carouselRef.current?.scrollTo({\r\n      left: scrollLeft !== undefined ? scrollLeft + 170 : 0,\r\n      behavior: 'smooth'\r\n    })\r\n  }, [carouselRef])\r\n\r\n  return (\r\n    <div className=\"carousel__wrapper\">\r\n      <div className=\"carousel\" ref={carouselRef}>\r\n        <div\r\n          onClick={handleLeftClick}\r\n          className=\"carousel__arrow carousel__leftArrow\"\r\n        >\r\n          {'<'}\r\n        </div>\r\n        <div className=\"carousel__container\">\r\n          {content.map((item, idx) => {\r\n            return (\r\n              <CarouselItem\r\n                key={idx}\r\n                item={item}\r\n                isLastItem={idx === content.length - 1}\r\n              />\r\n            )\r\n          })}\r\n        </div>\r\n        <div\r\n          onClick={handleRightClick}\r\n          className=\"carousel__arrow carousel__rightArrow\"\r\n        >\r\n          {'>'}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { Carousel }\r\n","import React from 'react'\r\nimport { getImage } from 'service/fetchWeatherForecast'\r\nimport './styles.css'\r\n\r\ninterface Props {\r\n  item: {\r\n    date: Date,\r\n    iconName: string,\r\n    temperature: number,\r\n  };\r\n}\r\n\r\nconst WeatherCardItem: React.FC<Props> = ({\r\n  item: { date, iconName, temperature }\r\n}) => {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <div className=\"card-container__date\">{date.getDate()}</div>\r\n      <img src={getImage(iconName)} alt=\"weather icon\"></img>\r\n      <div className=\"card-container__weather-temperature\">{temperature}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { WeatherCardItem }\r\n","export const formatDateToUnixTime = (date: Date) =>\r\n  Math.round(date.getTime() / 1000.0)\r\n\r\nexport const formatUnixTimeToDate = (unixTime: number) =>\r\n  new Date(unixTime * 1000)\r\n\r\nconst makeDateDoubleSymbol = (number: string | number) => {\r\n  const numberAsString = `${number}`\r\n  return numberAsString.length < 2 ? `0${numberAsString}` : numberAsString\r\n}\r\n\r\nexport const formatDateToString = (date: Date) => {\r\n  const year = date.getFullYear()\r\n  const month = date.getMonth() + 1\r\n  const day = date.getDate()\r\n  return `${year}-${makeDateDoubleSymbol(month)}-${makeDateDoubleSymbol(day)}`\r\n}\r\n","import React, { useCallback, useMemo, useState } from 'react'\r\nimport { WeatherCard } from 'components/WeatherCard'\r\nimport { IOption, Select } from 'components/Select'\r\nimport { CitiesOptions } from 'constants/cities'\r\nimport { DailyForecastResponse } from 'service/types/fetchWeatherForecastTypes'\r\nimport { IServerError } from 'service/types'\r\nimport { fetchDailyForecast } from 'service/fetchWeatherForecast'\r\nimport { Carousel } from 'components/Carousel'\r\nimport { WeatherCardItem } from 'components/WeatherCardItem'\r\nimport { formatUnixTimeToDate } from 'utils'\r\n\r\ninterface ICityOption extends IOption {\r\n  value: {\r\n    lon: number,\r\n    lat: number,\r\n  };\r\n}\r\n\r\nconst DailyForecastCard = () => {\r\n  const [data, setData] = useState<DailyForecastResponse | undefined>()\r\n  const [error, setError] = useState<IServerError | undefined>()\r\n  const [selectCityValue, setSelectCityValue] =\r\n    useState<ICityOption | undefined>()\r\n\r\n  const onSelectCity = useCallback(async (selectedOption: ICityOption) => {\r\n    setSelectCityValue(selectedOption)\r\n    try {\r\n      const data = await fetchDailyForecast({\r\n        lat: selectedOption.value.lat,\r\n        lon: selectedOption.value.lon\r\n      })\r\n      console.log(data)\r\n      setData(data)\r\n    } catch (e) {\r\n      setError(e)\r\n    }\r\n  }, [])\r\n\r\n  const content = useMemo(() => {\r\n    if (!data) return\r\n    const carouselContent = data.daily.map(({ dt, weather, temp }) => {\r\n      return (\r\n        <WeatherCardItem\r\n          item={{\r\n            date: formatUnixTimeToDate(dt),\r\n            iconName: weather[0].icon,\r\n            temperature: temp.day\r\n          }}\r\n        />\r\n      )\r\n    })\r\n    return <Carousel content={carouselContent} />\r\n  }, [data])\r\n  return (\r\n    <WeatherCard\r\n      title=\"7 Days Forecast\"\r\n      inputComponents={[\r\n        <Select\r\n          value={selectCityValue}\r\n          options={CitiesOptions}\r\n          onChange={onSelectCity}\r\n        />\r\n      ]}\r\n      content={content}\r\n    />\r\n  )\r\n}\r\n\r\nexport { DailyForecastCard }\r\n","import React, { useCallback } from 'react'\r\nimport { formatDateToString } from 'utils'\r\n\r\ninterface Props {\r\n    onChange: (date: Date) => void\r\n    value?: Date;\r\n    defaultValue?: Date\r\n    placeholder?: string\r\n  }\r\n\r\nconst DateInput:React.FC<Props> = ({ value, defaultValue, onChange, placeholder = 'select' }) => {\r\n  const handleChange = useCallback((e: any) => {\r\n    onChange(new Date(e.target.value))\r\n  }, [onChange])\r\n\r\n  return (\r\n        <input value={value && formatDateToString(value)} type=\"date\" className=\"input\" onChange={handleChange} defaultValue={defaultValue && formatDateToString(defaultValue)} placeholder={placeholder}\r\n    />\r\n  )\r\n}\r\n\r\nexport { DateInput }\r\n","import React, { useCallback, useMemo, useState } from 'react'\r\nimport { WeatherCard } from 'components/WeatherCard'\r\nimport { IOption, Select } from 'components/Select'\r\nimport { CitiesOptions } from 'constants/cities'\r\nimport { DateInput } from 'components/InputDate'\r\nimport { IServerError } from 'service/types'\r\nimport { HistoricalForecastResponse } from 'service/types/fetchWeatherForecastTypes'\r\nimport { fetchHistoricalForecast } from 'service/fetchWeatherForecast'\r\nimport { formatDateToUnixTime, formatUnixTimeToDate } from 'utils'\r\nimport { WeatherCardItem } from 'components/WeatherCardItem'\r\n\r\ninterface ICityOption extends IOption {\r\n  value: {\r\n    lon: number,\r\n    lat: number,\r\n  };\r\n}\r\n\r\nconst HistoricalForecastCard = () => {\r\n  const [data, setData] = useState<HistoricalForecastResponse | undefined>()\r\n  const [error, setError] = useState<IServerError | undefined>()\r\n  const [selectCityValue, setSelectCityValue] =\r\n    useState<ICityOption | undefined>()\r\n  const [selectedDateValue, setSelectedDateValue] = useState<Date | undefined>()\r\n\r\n  const fetchData = useCallback(async (selectedCity, selectedDate) => {\r\n    try {\r\n      const data = await fetchHistoricalForecast({\r\n        lat: selectedCity!.value.lat,\r\n        lon: selectedCity!.value.lon,\r\n        dt: formatDateToUnixTime(selectedDate!)\r\n      })\r\n      console.log(data)\r\n      setData(data)\r\n    } catch (e) {\r\n      console.log(e)\r\n\r\n      setError(e)\r\n    }\r\n  }, [])\r\n\r\n  const onSelectCity = useCallback((selectedOption: ICityOption) => {\r\n    setSelectCityValue(selectedOption)\r\n    if (selectedDateValue) {\r\n      fetchData(selectedOption, selectedDateValue)\r\n    }\r\n  }, [fetchData, selectedDateValue])\r\n\r\n  const onSelectDate = useCallback((selectedDate: Date) => {\r\n    setSelectedDateValue(selectedDate)\r\n\r\n    if (selectCityValue) {\r\n      fetchData(selectCityValue, selectedDate)\r\n    }\r\n  }, [fetchData, selectCityValue])\r\n\r\n  const content = useMemo(() => {\r\n    if (!data) return\r\n    const {\r\n      current: {\r\n        dt,\r\n        weather,\r\n        temp\r\n      }\r\n    } = data\r\n    return <WeatherCardItem\r\n    item={{\r\n      date: formatUnixTimeToDate(dt),\r\n      iconName: weather[0].icon,\r\n      temperature: temp\r\n    }}\r\n  />\r\n  }, [data])\r\n  return (\r\n    <WeatherCard\r\n      title=\"Forecast for a Date in the Past\"\r\n      inputComponents={[<Select value={selectCityValue} options={CitiesOptions} onChange={onSelectCity}/>, <DateInput value={selectedDateValue} onChange={onSelectDate}/>]}\r\n      content={content}\r\n    />\r\n  )\r\n}\r\n\r\nexport { HistoricalForecastCard }\r\n","import React from 'react'\r\nimport { DailyForecastCard } from './DailyForecastCard'\r\nimport { HistoricalForecastCard } from './HistoricalForecastCard'\r\nimport './styles.css'\r\n\r\nconst WeatherCards = () => {\r\n  return (\r\n    <div className=\"weather-cards\">\r\n      <DailyForecastCard />\r\n      <HistoricalForecastCard />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { WeatherCards }\r\n","import React from 'react'\r\nimport './styles.css'\r\nimport { WeatherCards } from './WeatherCards'\r\n\r\nconst ForecastPage = () => {\r\n  return (\r\n    <div className=\"forecastPage\">\r\n      <div className=\"forecastPage__title\">\r\n        <div className=\"forecastPage__titleItem forecastPage__first\">\r\n          Weather\r\n        </div>\r\n        <div className=\"forecastPage__titleItem forecastPage__second\">\r\n          forecast\r\n        </div>\r\n      </div>\r\n      <WeatherCards />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { ForecastPage }\r\n","import React from 'react'\nimport { ForecastPage } from 'ForecastPage'\n\nconst App = () => {\n  return (\n    <>\n      <ForecastPage />\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}